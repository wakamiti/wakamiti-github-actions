#!/bin/bash

if ! docker info >/dev/null 2>&1; then
  echo "Error: Docker is not running." >&2
  exit 1
fi

# Function to run a single test
run_test() {
  local test_file=$1
  local id=${test_file#Test_}
  local logfile="/var/log/act/$id.log"

  # Create log directory if it doesn't exist
  mkdir -p /var/log/
  rm -f "/target/.$id"

  # Print test header
  chars=$(( 60 - ${#id} ))
  echo -n "-- Test $id "
  printf -- '-%.0s' $(seq 1 $chars)
  echo

  # Run the test and measure execution time
  start_time=$(date +%s.%N)
  {
    echo "[$(date)] Init test $id"
    ./Test_${id}
    test_result=$?
    echo "[$(date)] Finish test $id with error code $test_result"
    sleep 1
    exit $test_result
  } > $logfile 2>&1 &
  pid=$!

  # Process test results
  timeout 30 bash -c "while [ ! -s "/target/.$id" ]; do sleep 1; done"

  if [ -f "/target/.$id" ]; then
    # Extract job names and process them
    cat /target/.$id | awk 'NR>1 {print $2}' | while read job; do
      job_start_time=0
      while true; do
        if [ "$job_start_time" = "0" ] && grep -q "^\[$job\] " "$logfile"; then
          job_start_time=$(date +%s.%N)
        fi
        if grep -q "\[$job\] .*Job succeeded" "$logfile"; then
          job_end_time=$(date +%s.%N)
          job_elapsed_seconds=$(awk "BEGIN {print $job_end_time - $job_start_time}")
          echo -e "Job [$job] \033[32mSUCCESS\033[0m ($job_elapsed_seconds sec)"
          break
        fi
        kill -0 $pid 2>/dev/null || break
      done
    done
    wait $pid; test_result=$?

    end_time=$(date +%s.%N)
    elapsed_seconds=$(awk "BEGIN {print $end_time - $start_time}")
    sleep 1

    cat /target/.$id | awk 'NR>1 {print $2}' | while read job; do
      grep "^\[$job\] " "$logfile" | if ! grep -q "Skipping job\|Job succeeded"; then
        echo -e "Job [$job] \033[31mFAILED\033[0m"
      fi
    done
  else
    echo "Warning: No job information found for test $id"
  fi

  echo "Duration: $elapsed_seconds sec"
  echo -e "Test result: $([ $test_result -eq 0 ] && echo '\033[32mSUCCESS\033[0m' || echo '\033[31mFAILED\033[0m')"

  # Return success
  return 0
}

# Main execution
cd /test/scripts
tests=( ${@:-Test_*} )

echo "Found tests: ${#tests[@]}"

# Run tests
total_duration=0
for test_file in ${tests[@]}; do
  run_test $test_file

  duration=$(echo $elapsed_seconds | awk '{print ($1 == "" ? 0 : $1)}')
  total_duration=$(awk "BEGIN {print $total_duration + $duration}")
done
echo ---------------------------------------------------------------------
echo "Total duration: $total_duration sec"

# Clean up after the test
#echo "Cleaning up after tests..."
#/docker/clean >/dev/null 2>&1