# Workflow Name: Create new release
# This GitHub Actions workflow automates the release process by creating a new release branch,
# updating version numbers, and creating a pull request for review.

name: Create new release
on:
  workflow_call:
    inputs:
      # Input: working-directory
      # - Optional working directory for the workflow
      # - Type: string
      # - Default: "."
      working-directory:
        required: false
        type: string
        default: "."
      branch:
        required: false
        type: string
        default: "develop"
      changelog:
        required: true
        type: string
      version:
        required: true
        type: string
      revision:
        required: true
        type: boolean
      type:
        required: true
        type: string
    outputs:
      head:
        description: "The release source branch"
        value: ${{ jobs.release.outputs.head }}
      title:
        description: "The release title"
        value: ${{ jobs.release.outputs.title }}
      body:
        description: "The release body"
        value: ${{ jobs.release.outputs.body }}

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    env:
      CHANGELOG: ${{ inputs.changelog }}
      VERSION: ${{ inputs.version }}
      REVISION: ${{ inputs.revision }}
    outputs:
      head: ${{ steps.pr-info.outputs.HEAD }}
      title: ${{ steps.pr-info.outputs.TITLE }}
      body: ${{ steps.pr-info.outputs.BODY }}
    steps:
      # Step: Checkout code
      # - Checks out the repository code.
      # - Fetch-depth is set to 0 to ensure the full history is available for analysis.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git checkout ${{ inputs.branch }}

        # Step: Set up JDK
      # - Sets up Java Development Kit (JDK) version 17 using the Temurin distribution.
      # - Caches Maven dependencies for faster builds.
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
          overwrite-settings: 'false'

      # Step: Cache Maven settings
      # - Caches Maven settings file to avoid re-downloading it.
      - name: Cache Maven settings
        uses: actions/cache@v4
        with:
          path: ~/.m2/settings.xml
          key: settings-xml

      # Step: Cache Maven packages
      # - Caches Maven dependencies to reduce build time.
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step: Check version
      # - Validates changelog format and version requirements
      # - Ensures the current version is a SNAPSHOT
      # - Verifies version doesn't already exist in changelog
      - name: Check version
        working-directory: ${{ inputs.working-directory }}
        run: |
          if ! grep -iq "\[unreleased\]" ${{ env.CHANGELOG }}; then 
            echo "::error::${{ env.CHANGELOG }} must contain an [unreleased] block."
            exit 1
          fi
          if [[ ! ${{ env.VERSION }} =~ -SNAPSHOT$ ]]; then
            echo "::error::Current version ${VERSION} is not a snapshot."
            exit 1
          fi
          new_version=$(echo "${{ env.VERSION }}" | sed 's/-SNAPSHOT//')
          if grep -iq "\[$new_version\]" ${{ env.CHANGELOG }}; then
            echo "::error::Current version $new_version already exists in ${{ env.CHANGELOG }}."
            exit 1
          fi
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      # Step: Initialize git config
      # - Creates new 'release' branch from 'develop'
      - name: Initialize mandatory git config
        working-directory: ${{ inputs.working-directory }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email noreply@github.com
          git checkout -b ${{ inputs.type }}/v${{ env.NEW_VERSION }} ${{ inputs.branch }}

      # Step: Change version
      # - Updates version in pom.xml (supports revision property)
      # - Updates changelog by replacing [unreleased] with version
      # - Extracts changelog body for PR
      - name: Change version
        id: change-version
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [[ ${REVISION} == 'true' ]]; then
            mvn versions:set-property -Dproperty=revision -DnewVersion=${{ env.NEW_VERSION }} -DgenerateBackupPoms=false
          else
            mvn versions:set -DnewVersion=${{ env.NEW_VERSION }} -DgenerateBackupPoms=false
          fi
          body=$(sed -n '/^## \[unreleased\]/,/^## \[/p' ${{ env.CHANGELOG }} | sed '/^## \[/d' | sed ':a;N;$!ba;s/\n/\\n/g')
          sed -i "s/\[unreleased\]/[${{ env.NEW_VERSION }}] - $(date +%F)/" ${{ env.CHANGELOG }}
          echo "PR_BODY=$body" >> $GITHUB_ENV

      # Step: Commit and push
      # - Commits version changes
      # - Pushes release branch
      - name: Commit and push
        working-directory: ${{ inputs.working-directory }}
        run: |
          git add .
          git commit --message "Prepare ${{ inputs.type }} ${{ env.NEW_VERSION }}"
          git push origin ${{ inputs.type }}/v${{ env.NEW_VERSION }}

      - name: Pull Request info
        id: pr-info
        run: |
          echo "HEAD=${{ inputs.type }}/v${{ env.NEW_VERSION }}" >> $GITHUB_OUTPUT
          echo "TITLE=New version v${{ env.NEW_VERSION }}" >> $GITHUB_OUTPUT
          echo "BODY=${{ env.PR_BODY }}" >> $GITHUB_OUTPUT

      - name: Rollback changes
        if: failure()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if git show-ref --quiet refs/heads/${{ inputs.type }}/v${{ env.NEW_VERSION }}; then
            git checkout ${{ inputs.branch }}
            git branch -D ${{ inputs.type }}/v${{ env.NEW_VERSION }}
            git push origin --delete ${{ inputs.type }}/v${{ env.NEW_VERSION }} || true
          fi


