name: Create Release Branch

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      reviewers:
        required: false
        type: string
        default: mgalbis
      working-directory:
        required: false
        type: string
        default: "."

jobs:
  release:
    name: Create release branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create release branch
        working-directory: ${{ inputs.working-directory }}
        run: git checkout -b release/v${{ inputs.version }} develop

      - name: Check version
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo error: CHANGELOG.md file does not exists.
            exit 1
          fi
          if ! grep -iq "\[unreleased\]" CHANGELOG.md; then 
            echo error: CHANGELOG.md must contains an [unreleased] block.
            exit 1
          fi
          snapshot=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          if [[ ! $snapshot =~ -SNAPSHOT$ ]]; then
            echo error: Current version $snapshot is not a snapshot.
            exit 1
          fi
          if [[ ! $snapshot == ${{ inputs.version }}-SNAPSHOT$ ]]; then
            echo error: Current version $snapshot is not the snapshot of version ${{ inputs.version }}.
            exit 1
          fi
          if grep -iq "\[${{ inputs.version }}\]" CHANGELOG.md; then
            echo error: Current version ${{ inputs.version }} already exists in CHANGELOG.md.
            exit 1
          fi

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Change version
        id: change-version
        run: |
          snapshot=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          if [[ $snapshot == $(mvn -q help:evaluate -Dexpression=revision -DforceStdout) ]]; then
            mvn versions:set-property -Dproperty=revision -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
          else 
            mvn versions:set -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
          fi
          body=$(sed -n '/^## \[unreleased\]/,/^## \[/p' changelog.md | sed '/^## \[/d')
          cat changelog.md | sed "s/\[unreleased\]/[${{ inputs.version }}] - $(date +%F)/" > changelog.md
          echo "::set-output name=body::$body"

      - name: Commit and push
        run: |
          git add pom.xml
          git add CHANGELOG.md
          git commit --message "Prepare release ${{ inputs.version }}"
          git push origin release/v${{ inputs.version }}

#      - name: Create pull request into main
#        uses: thomaseizinger/create-pull-request@1.0.0
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          head: release/v${{ inputs.version }}
#          base: main
#          title: Release version v${{ inputs.version }}
#          reviewers: ${{ inputs.reviewers }}
#          body: |
#            ${{ steps.change-version.outputs.body }}
