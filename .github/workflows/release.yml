name: Create Release Branch

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      reviewers:
        required: false
        type: string
        default: mgalbis
      working-directory:
        required: false
        type: string
        default: "."

jobs:
  release:
    name: Create release branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create release branch
        working-directory: ${{ inputs.working-directory }}
        run: |
          git checkout -b release/v${{ inputs.version }} develop
          echo "CHANGELOG=$(ls | grep -i "changelog.md")" >> $GITHUB_ENV

      - name: Check version
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f "${{ env.CHANGELOG }}" ]; then
            echo error: ${{ env.CHANGELOG }} file does not exists.
            exit 1
          fi
          if ! grep -iq "\[unreleased\]" ${{ env.CHANGELOG }}; then 
            echo error: ${{ env.CHANGELOG }} must contains an [unreleased] block.
            exit 1
          fi
          snapshot=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          if [[ ! $snapshot =~ -SNAPSHOT$ ]]; then
            echo error: Current version $snapshot is not a snapshot.
            exit 1
          fi
          if [[ ! $snapshot == ${{ inputs.version }}-SNAPSHOT ]]; then
            echo error: Current version $snapshot is not the snapshot of version ${{ inputs.version }}.
            exit 1
          fi
          if grep -iq "\[${{ inputs.version }}\]" ${{ env.CHANGELOG }}; then
            echo error: Current version ${{ inputs.version }} already exists in ${{ env.CHANGELOG }}.
            exit 1
          fi

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Change version
        id: change-version
        working-directory: ${{ inputs.working-directory }}
        run: |
          snapshot=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          if [[ $snapshot == $(mvn -q help:evaluate -Dexpression=revision -DforceStdout) ]]; then
            mvn versions:set-property -Dproperty=revision -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
          else 
            mvn versions:set -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
          fi
          body=$(sed -n '/^## \[unreleased\]/,/^## \[/p' ${{ env.CHANGELOG }} | sed '/^## \[/d')
          cat ${{ env.CHANGELOG }} | sed "s/\[unreleased\]/[${{ inputs.version }}] - $(date +%F)/" > ${{ env.CHANGELOG }}
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit and push
        working-directory: ${{ inputs.working-directory }}
        run: |
          git add .
          git commit --message "Prepare release ${{ inputs.version }}"
          git push origin release/v${{ inputs.version }}

      - name: create pull request
        run: | 
          gh pr create \
            -B main \
            -H release/v${{ inputs.version }} \
            -r ${{ inputs.reviewers }}
            --title 'Release version v${{ inputs.version }}' \
            --body "${{ env.PR_BODY }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
