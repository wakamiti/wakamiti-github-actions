#
# This workflow automates the deployment of a new release for a Maven/Java
# project.
#
# Requirements:
#   - secrets for Maven Central and GPG signing must be configured.
#   - gh CLI must be available for release creation and artifact upload.
#
on:
  workflow_call:
    inputs:

      # The changelog file name.
      changelog:
        required: true
        type: string

      # The current version.
      version:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      CHANGELOG: ${{ inputs.changelog }}
      VERSION: ${{ inputs.version }}
    steps:

      # Checks out the full history of repository code.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Sets up Java Development Kit (JDK) version 17 using the Temurin
      # distribution.
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      # Caches Maven dependencies to reduce build time.
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      # Caches SonarCloud dependencies to speed up the analysis process.
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        if: ${{ hashFiles('**/src/**') != '' }}
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Builds and deploys the project to Maven Central, skipping tests.
      - name: Build and Deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.CENTRAL_USER }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_SECRET_KEY_PASSWORD }}
        run: mvn deploy -Prelease -DskipTests

      # Extracts release data from the changelog and prepares the release body.
      - name: Recovery release data
        run: |
          tag="v${{ env.VERSION }}"
          prev_tag=$(git describe --tags --abbrev=0 || echo "")
          body=$(sed -n "/^## \[${{ env.VERSION }}\]/,/^## \[/p" ${{ env.CHANGELOG }} | \
            sed '/^## \[/d' | sed ':a;N;$!ba;s/\n/\\n/g')
          if [ -n "$prev_tag" ]; then 
            compare="https://github.com/${{ github.repository }}/compare/$prev_tag...$tag"
            body="$body\\n\\n---\\n[Full Changelog]($compare)\\n"
          fi
          echo "TAG=$tag" >> $GITHUB_ENV
          echo "BODY=$body" >> $GITHUB_ENV

      # Creates a Git tag, pushes it, creates a GitHub release, and uploads artifacts.
      - name: Create release
        run: |
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}
          upload_url=$(gh api repos/${{ github.repository }}/releases \
            -X POST \
            -f tag_name="${{ env.TAG }}" \
            -f name="${{ env.VERSION }}" \
            -f body="${{ env.BODY }}" \
            -f draft=false \
            -f prerelease=false \
            --jq '.upload_url' | sed 's/{?name,label}//') || exit 1
          shopt -s globstar
          for file in target/central-staging/**/*.jar target/central-staging/**/*.pom; do
            gh api "$upload_url?name=$(basename "$file")" \
              -H "Content-Type: $(file --mime-type -b "$file")" \
              --method POST \
              --input "$file"
          done
