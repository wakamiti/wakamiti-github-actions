#
# This workflow extracts and outputs the current changelog file, project
# version, revision property usage, and branch name.
#
on:
  workflow_call:
    inputs:

      # The branch to check out and analyze.
      branch:
        required: true
        type: string

    outputs:
      changelog:
        description: "The changelog name"
        value: ${{ jobs.status.outputs.changelog }}
      version:
        description: "The current version"
        value: ${{ jobs.status.outputs.version }}
      revision:
        description: "Flag indicating if the pom version is managed through the revision property"
        value: ${{ jobs.status.outputs.revision }}
      branch:
        description: "The current branch"
        value: ${{ inputs.branch }}

jobs:
  status:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      changelog: ${{ steps.changelog.outputs.CHANGELOG }}
      version: ${{ steps.version.outputs.VERSION }}
      revision: ${{ steps.version.outputs.REVISION }}
    steps:

      # Checks out the repository code using the specified branch provided as
      # input.
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # Sets up Java Development Kit (JDK) version 17 using the Temurin
      # distribution.
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
          overwrite-settings: 'false'

      # Caches Maven settings file to avoid re-downloading it.
      - name: Cache Maven settings
        uses: actions/cache@v4
        with:
          path: ~/.m2/settings.xml
          key: settings-xml

      # Caches Maven dependencies to reduce build time.
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      # Validates existence of CHANGELOG.md
      - name: Prepare branch
        id: changelog
        run: |
          CHANGELOG=$(ls | grep -i "changelog.md")
          if [ -z "$CHANGELOG" ]; then
            echo "::error::CHANGELOG.md file does not exist."
            exit 1
          fi
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_OUTPUT

      # Determines the current Maven project version and if the revision
      # property is used.
      - name: Check version
        id: version
        env:
          CHANGELOG: ${{ steps.changelog.outputs.CHANGELOG }}
        run: |
          if [ ! -f "${CHANGELOG}" ]; then
            echo "::error::${CHANGELOG} file does not exist."
            exit 1
          fi
          version=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout)
          if [[ $version == $(mvn -q help:evaluate -Dexpression=revision -DforceStdout) ]]; then
            echo "REVISION=true" >> $GITHUB_OUTPUT
          else
            echo "REVISION=false" >> $GITHUB_OUTPUT
          fi
          echo "VERSION=$version" >> $GITHUB_OUTPUT
